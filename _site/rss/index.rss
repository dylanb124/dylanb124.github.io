<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Dylan Barnes' Blog</title><description>A collection of adventures from the life of a budding programmer</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Dylan Barnes' Blog</title><link>http://localhost:2368/</link></image><generator>Ghost 1.21</generator><lastBuildDate>Sun, 18 Mar 2018 20:41:31 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Writing an AOT Compliant Angular Library</title><description>Learn how to get an AOT Angular service library up and running with minimal effort. Full code examples and step by step tutorials included.</description><link>http://localhost:2368/writing-an-aot-compliant-angular-library/</link><guid isPermaLink="false">5aae97fd7e4edb13ae59abb2</guid><category>AOT</category><category>npm</category><category>library</category><category>service</category><category>angular</category><dc:creator>Dylan Barnes</dc:creator><pubDate>Sun, 19 Mar 2017 21:36:20 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/03/angular2-library-example-code-1.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="http://localhost:2368/content/images/2018/03/angular2-library-example-code-1.png" alt="Writing an AOT Compliant Angular Library"&gt;&lt;p&gt;As the use of Angular expands in my workplace, I find myself delving deeper into the corners of the Angular framework. Recently, this happened to be library development. To my surprise, there seemed to be a lack of relevant material on the subject, which led to a lot of digging and experimentation. The following write up details my experience, which I hope will prove useful to others as they attempt to tackle library development.&lt;/p&gt;
&lt;h3 id="background"&gt;Background&lt;/h3&gt;
&lt;p&gt;Let's take a step back. Why did I find the need to create my own libraries, and why must it be AOT compliant? What is &amp;quot;AOT compliance&amp;quot;, and why should anyone care?&lt;/p&gt;
&lt;h4 id="standardizewithlibraries"&gt;Standardize with libraries&lt;/h4&gt;
&lt;p&gt;In our workplace, we have 4 developers working in the Angular realm, with varying levels of experience. Up until this point, shared services and components have been passed around from person to person in crude file sharing methods. As changes are made to different versions of the library, we end up with vastly different variations of what was originally the same library. This also makes it difficult to find the &amp;quot;latest&amp;quot; version of the library.&lt;/p&gt;
&lt;p&gt;To solve this, I created a private, IP secure &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt; repository using &lt;a href="https://github.com/verdaccio/verdaccio"&gt;Verdaccio&lt;/a&gt;. This repository would serve as the home of our company's libraries. As long as all developers agree to use this NPM repository as the source of truth, we can successfully control what changes to the library are published and used in production applications. This has the added benefit of making it very simple to install and use these libraries through NPM.&lt;/p&gt;
&lt;h4 id="aotcompliance"&gt;AOT Compliance&lt;/h4&gt;
&lt;p&gt;AOT stands for &lt;strong&gt;A&lt;/strong&gt;head &lt;strong&gt;O&lt;/strong&gt;f &lt;strong&gt;T&lt;/strong&gt;ime compilation. Without going into too much detail, AOT compilation has the following benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Less code generated in the production bundle.&lt;/strong&gt; A compiler is not included in the output, and tree-shaking reduces unneeded dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Faster rendering.&lt;/strong&gt; This means a faster application for the end user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Compile time syntax checking.&lt;/strong&gt; Various template errors will be caught at compile time instead of run time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Improved Security.&lt;/strong&gt; Since templates are compiled ahead of time, there is less room for HTML injection.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Due to all of these benefits, the majority of our newer applications utilize AOT compilation. When an application compiles ahead of time, all libraries used by the app must also be AOT compliant. Thus, this became a requirement for any library I was going to make.&lt;/p&gt;
&lt;h3 id="librarydevelopment"&gt;Library Development&lt;/h3&gt;
&lt;p&gt;Now, with a better understanding of the topic, we will transition into the instructional portion of this post. I will walk you step by step through creating a library that will successfully compile with an AOT compliant application. Let's get started.&lt;/p&gt;
&lt;h4 id="examplecode"&gt;Example Code&lt;/h4&gt;
&lt;p&gt;The instructions to follow have been replicated and uploaded to Github repositories for those that learn better by having a complete example (myself included). Refer to the commit history if you'd like to follow along.&lt;/p&gt;
&lt;p&gt;Angular Library Example:&lt;br&gt;
&lt;a href="https://github.com/dylanb124/angular2-library-example"&gt;https://github.com/dylanb124/angular2-library-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Angular Client App Example:&lt;br&gt;
&lt;a href="https://github.com/dylanb124/angular2-client-app-example"&gt;https://github.com/dylanb124/angular2-client-app-example&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="scaffoldingwithyeoman"&gt;Scaffolding with Yeoman&lt;/h4&gt;
&lt;p&gt;To avoid having to self-maintain my own library template, I use the &lt;a href="https://github.com/jvandemo/generator-angular2-library"&gt;Yeoman Angular Library Generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[&lt;img src="https://cloud.githubusercontent.com/assets/1859381/24447242/901c8a1a-1470-11e7-8b55-2484b7825722.jpg" alt="Writing an AOT Compliant Angular Library"&gt;&lt;br&gt;
Follow the excellent instructions provided on the github page for the generator in order to get it installed and generate a source controlled library. While this gets us 90% of the way there, I have made some of my own modifications to the generated library in support of AOT compilation, which I will detail below.&lt;/p&gt;
&lt;h5 id="filecleanup"&gt;File Cleanup&lt;/h5&gt;
&lt;p&gt;Depending on the type of library you are making, you will most likely want to delete some of the example files. In this tutorial, I am going to be creating a service library. I will be keeping the &lt;code&gt;sample.service.ts&lt;/code&gt; file, and deleting &lt;code&gt;sample.component.ts&lt;/code&gt;, &lt;code&gt;sample.directive.ts&lt;/code&gt;, and &lt;code&gt;sample.pipe.ts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you have removed the example files you won't be using, you will have to remove the imports from &lt;code&gt;index.ts&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { NgModule, ModuleWithProviders } from '@angular/core';
import { CommonModule } from '@angular/common';
// import { SampleComponent } from './src/sample.component';
// import { SampleDirective } from './src/sample.directive';
// import { SamplePipe } from './src/sample.pipe';
import { SampleService } from './src/sample.service';

// export * from './src/sample.component';
// export * from './src/sample.directive';
// export * from './src/sample.pipe';
export * from './src/sample.service';

@NgModule({
  imports: [
    CommonModule
  ],
  // declarations: [
  //  SampleComponent,
  //  SampleDirective,
  //  SamplePipe
  // ],
  // exports: [
  //  SampleComponent,
  //  SampleDirective,
  //  SamplePipe
  // ]
})
export class SampleModule {
  static forRoot(): ModuleWithProviders {
    return {
      ngModule: SampleModule,
      providers: [SampleService]
    };
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id="configurationchanges"&gt;Configuration Changes&lt;/h5&gt;
&lt;p&gt;Since we are making the library AOT compliant, there are a few changes we can implement to make development go smoother.&lt;/p&gt;
&lt;p&gt;First, add the following to the bottom of &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;&amp;quot;angularCompilerOptions&amp;quot;: {
  &amp;quot;strictMetadataEmit&amp;quot;: true,
  &amp;quot;genDir&amp;quot;: &amp;quot;compiled&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will output AOT specific files to a &lt;code&gt;compiled&lt;/code&gt; folder, which you will want to create in the project root directory. The files generated in this folder should end with a &lt;code&gt;ngsummary.json&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;However, there's no need to track these files in our Git repo, so we will want to add the following to &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;# Ignore AOT generated files
*.ngsummary.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to this, we will want to add the same to &lt;code&gt;.npmignore&lt;/code&gt; to ensure summary files are not published to the NPM repository either. While you are here, you may find it useful to exclude lint files as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;# Ignore AOT generated files
*.ngsummary.json

# Ignore linting
tslint.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Feel free to make changes to &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;README.MD&lt;/code&gt; at this point to reflect application specific information. However, this is entirely optional.&lt;/p&gt;
&lt;h5 id="testupdates"&gt;Test Updates&lt;/h5&gt;
&lt;p&gt;At this point, you'll want to make sure the changes you have made are working as expected.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build the application with the typescript compiler.&lt;/strong&gt; Run the following command in the command line: &lt;code&gt;npm run tsc&lt;/code&gt;. You should now have new files in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build the application with the AOT compiler.&lt;/strong&gt; Run the following command in the command line: &lt;code&gt;npm run build&lt;/code&gt;. You should now have new files in the &lt;code&gt;compiled&lt;/code&gt; folder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you had any compilation errors, you will want to review the instructions up to this point and ensure you have followed the steps properly. If you are unable to resolve your issue, please feel free to leave a comment and I will do my best to assist you.&lt;/p&gt;
&lt;h3 id="serviceparameters"&gt;Service Parameters&lt;/h3&gt;
&lt;p&gt;This section will prove useful to libraries that provide a service and require arguments from the calling application.&lt;/p&gt;
&lt;h4 id="library"&gt;Library&lt;/h4&gt;
&lt;p&gt;To start with, we will have to expose a parameter for the parent application to use. If we want our library to be AOT compliant, we will need to expose this as a function in &lt;code&gt;index.ts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;export class SampleModule {
  static forRoot(getConfig: Function): ModuleWithProviders {
    return {
      ngModule: SampleModule,
      providers: [
        { provide: 'config', useFactory: getConfig },
        SampleService
      ]
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;config&lt;/code&gt; value may now be accessed through dependency injection anywhere in the library. For example, in &lt;code&gt;sample.service.ts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { Inject, Injectable } from '@angular/core';

@Injectable()
export class SampleService {

  constructor(@Inject('config') private config: string) {
    console.log(this.config);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In real usage, the config variable would be typed as a custom interface or class containing the configurable properties. However, I am using a string for the sake of simplicity.&lt;/p&gt;
&lt;h5 id="clientapplication"&gt;Client Application&lt;/h5&gt;
&lt;p&gt;Now that we have exposed the parameters, we need to figure out how to pass configuration values from the client application. For my example, I will be generating an app using the popular CLI tool, &lt;a href="https://github.com/angular/angular-cli"&gt;Angular CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we need to package up our library so we can use it in other applications. I would suggest locally packaging the file, as opposed to publishing it to an NPM repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm pack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should generate a file called &lt;code&gt;[LIBRARY_NAME]-[LIBRARY_VERSION].tgz&lt;/code&gt;. I suggest moving this file to the project directory of your client application.&lt;/p&gt;
&lt;p&gt;Now that we have the library packaged up, we can install it from the project directory of our client application using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm install [LIBRARY_NAME]-[LIBRARY_VERSION].tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once installed, the library can be imported into &lt;code&gt;app.module.ts&lt;/code&gt;, the same place where we will pass our configuration arguments to the library service.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';

import { AppComponent } from './app.component';
import { SampleModule } from 'angular2-library-example';

export function createConfig(): string {
  return 'Config injection successful!';
}

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpModule,
    SampleModule.forRoot(createConfig)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then inject the service in any component we like, such as &lt;code&gt;app.component.ts&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-typescript"&gt;import { Component } from '@angular/core';
import { SampleService } from 'angular2-library-example';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'app works!';

  // Inject sample serivce
  constructor(private sampleService: SampleService) {

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all works as planned, you should be able to AOT build and run the application, receiving the following message in the browser console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Config injection successful!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using Angular CLI, you may build and run your application by issuing the &lt;code&gt;ng serve --aot&lt;/code&gt; command from your project root directory.&lt;/p&gt;
&lt;h3 id="publishyourlibrary"&gt;Publish Your Library&lt;/h3&gt;
&lt;p&gt;There's a high probability that you'll want to eventually publish this library to either the public NPM repository or to a private NPM repository. Luckily for you, NPM makes this very easy to do.&lt;/p&gt;
&lt;h6 id="public"&gt;Public&lt;/h6&gt;
&lt;p&gt;Ensure your &lt;code&gt;package.json&lt;/code&gt; file of your library is configured appropriately, and run the following in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm publish
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id="private"&gt;Private&lt;/h5&gt;
&lt;p&gt;Append to the bottom of your &lt;code&gt;package.json&lt;/code&gt; file the private repository which you wish to publish to:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;publishConfig&amp;quot;: {
  &amp;quot;registry&amp;quot;: &amp;quot;http://MY-REPO-URL/&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then perform the following in the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;npm config set registry &amp;lt;registry url&amp;gt;
npm login
npm publish
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="summary"&gt;Summary&lt;/h3&gt;
&lt;p&gt;After reading this blog post, you should be able to accomplish the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an Angular library using a template generator&lt;/li&gt;
&lt;li&gt;Implement an AOT compatible service in the library that accepts arguments&lt;/li&gt;
&lt;li&gt;Successfully install and use your library in any Angular application&lt;/li&gt;
&lt;li&gt;Publish the library to an NPM repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thank you for reading. If you'd like to leave feedback or have any questions, please feel free to leave a comment and I'll get back to you promptly.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>